#!/usr/bin/env python 
# -*- coding: utf-8 -*-


# Script for manuscript "Detecting Polygenic Adaptation For A Threshold Trait In Experimental Populations Using Time-Series Data"


#Clément BARTHÉLÉMY, La Rochelle University, Station Ifremer de La Tremblade


#====================================================================================================================
######################################  Contact : clement.barthelemy@gmail.com  #####################################
#====================================================================================================================


#====================== Path ======================#


PATHF = os.path.join('/home/clement/Documents/SimulationPP')


#====================== Packages ======================#


import numpy
import os.path


#====================== Initialization Population ======================#


pop = sim.Population(size=nb_indiv, loci=nb_loci, infoFields=['sum_g1','z1','fitness']) #Initialization of the first generation

allelic_effects = [[0 for x in range(nb_allele)] for x in range(nb_loci)] #Matrix for storage all the allelic effects, initiate at 0

allele_freq = [0 for x in range(nb_allele)]

allele_freq2 = [0 for x in range(nb_allele)]


#====================== Functions ======================#


#-----------  Reading the allelic effects -----------#


def allelic_effects_import():

    Aeffects = open(os.path.join(PATHF, "Resultats", "Allelic_Effects_File.txt"), "r")

    allelic_effects=Aeffects.read()

    Aeffects.close()


    allelic_effects=allelic_effects.replace('[',"")

    allelic_effects=allelic_effects.replace(']',"")

    allelic_effects=allelic_effects.replace(' ',"")



    Lea=[]

    Lelement=[]

    cpt8=-1

    cptfi=0

    for charac in allelic_effects:

        cpt8=cpt8+1

        if (charac!=','):

            cptfi=cptfi+1
        else:
            a=float(allelic_effects[cpt8-cptfi:cpt8])

            Lelement.append(a)

            cptfi=0


        if (cpt8==len(allelic_effects)-1):

            a=float(allelic_effects[cpt8-cptfi+1:cpt8+1])

            Lelement.append(a)


        if (len(Lelement)==2):

            Lea.append(Lelement)

            Lelement=[]

    allelic_effects = Lea

    return (allelic_effects)


allelic_effectsAF=allelic_effects_import()


ndataAE=os.path.join(PATHF, "Resultats", "Allelic_Effects_Rfile.txt")

file_mat=open(ndataAE, "w")

numpy.savetxt(
    file_mat,                                 # file name
    allelic_effectsAF,                                     # array to save
    fmt='%.18f',                            # formatting, 2 digits in this case
    delimiter=',',                          # column delimiter
    newline='\n')                           # new line character
    #footer='end of file',                  # file footer
    #comments='# ',                         # character to use for comments
    #header='Data generated by numpy')      # file header


file_mat.close()


#####################################################################################################################


#-----------  We calculate the value of the trait for each individual -----------#


def value_qtraits_individual(ind):

    locus = 0
    sum_g1 = 0

    allelic_effects=allelic_effects_import()

    for allele in ind.genotype():

        sum_g1 = allelic_effects[locus][allele] + sum_g1 #Summing all the alleles effects which are coding for the trait

        locus = locus + 1

        if (locus==nb_loci):
            locus = 0

        z1 = sum_g1 + random.normalvariate(0,micro_env) #Corresponding to Xi, the microenvironmental deviation

        ind.setInfo(sum_g1, 'sum_g1')
        ind.setInfo(z1, 'z1') 


    return True


def value_qtraits_individual2(ind):

    locus = 0
    sum_g1 = 0

    allelic_effects=allelic_effects_import()

    for allele in ind.genotype():

        sum_g1 = allelic_effects[locus][allele] + sum_g1 #Summing all the alleles effects which are coding for the trait

        locus = locus + 1

        if (locus==nb_loci):
            locus = 0

        z1 = sum_g1 + random.normalvariate(0,micro_env) #Corresponding to Xi, the microenvironmental deviation

        ind.setInfo(sum_g1, 'sum_g1')
        ind.setInfo(z1, 'z1') 

    return (sum_g1, z1)


#####################################################################################################################


#-----------  Creation of the columns for the repetition and the generation -----------#


repeat=str(repeat)

Lrep=[] #List of the repeat's number

command1="rm "+os.path.join(PATHF, "Resultats", "RepCol.csv")

os.system(command1)

command2="touch "+os.path.join(PATHF, "Resultats", "RepCol.csv")

os.system(command2) #Bash Command : create a new text file

ListREP = open(os.path.join(PATHF, "Resultats", "RepCol.csv"), "a")

line = ListREP.write("rep"+"\n")

for k in range(nb_gen*nb_indiv):

        line = ListREP.write(repeat+"\n")
       
ListREP.close()

repeat=int(repeat)


#====================== Populations Dynamics : simuPOP Script ======================#

recomb_rate=0.5

if (repeat ==1):

    nb_gen_init=1

# Create the first generation at the first repetition

    pop.evolve(

        initOps=[
            sim.PyOperator(func=value_qtraits_individual),
            sim.InitSex(), #Random sex initialization

            #sim.InitGenotype(freq=lambda : random.betavariate(1,1))

            sim.InitGenotype(freq=(0.5, 0.5)),
        ],

        matingScheme=sim.RandomMating( #Random mating for the reproduction
        ops = [sim.Recombinator(rates=recomb_rate)],
        ),

        postOps=[
        sim.PyQuanTrait(loci=range(nb_loci), func=value_qtraits_individual2, infoFields=['sum_g1','z1']),
        ],

        gen = nb_gen_init
    )


# Export and import the data of the population to have a text file and work with it

    file_to_open_1=os.path.join(PATHF, "savepop0.pop")

    pop.save(file_to_open_1)

    pop = sim.loadPopulation(file_to_open_1)

    file_to_open_2=os.path.join(PATHF, "Resultats" , "myPOP_Generation0.tmp")

    export(pop,format='csv',infoFields=['sum_g1','z1','fitness'],output=file_to_open_2, gui=False)

    file_to_open_3=os.path.join(PATHF, "Resultats" , "myPOP_Initial_Generation0.txt")

    export(pop,format='csv',infoFields=['sum_g1','z1','fitness'],output=file_to_open_3, gui=False) 

    obs1 = numpy.genfromtxt(
        file_to_open_2,                  # file name
        skip_header=1,          # lines to skip at the top
        #skip_footer=0,          # lines to skip at the bottom
        delimiter=',',          # column delimiter
        dtype='float')            # data type
        #filling_values=0)       # fill missing values with 0calcul complexité d'un script


    sub1=obs1[:,1]

    moy=numpy.mean(sub1)


#Export zopt and import zopt if repeat =/ 1

    zoptz1=moy+zopt_dist
    zoptz1=str(zoptz1)
    with open(os.path.join(PATHF, "Resultats", "zopt.txt"),'w') as f:
        f.write(zoptz1)

    with open(os.path.join(PATHF, "Resultats", "Simulation_Parameters.txt"),'a') as f:
        f.write(zoptz1)

    zoptz1=float(zoptz1)

else:
    file = open(os.path.join(PATHF, "Resultats", "zopt.txt"), 'r')
    zoptz1= float(file.read())
    file.close()


###############################s######################################################################################


#-----------  We calculate the fitness of each individual -----------#

def calc_fitness(pop, ind, z1) :

    survival=(math.exp(-pow((z1 - zoptz1), 2) / (2*pow(selection_intensity_z1, 2))))

    if survival > 0.3:

        repro=2

        while (repro > 1) or (repro < 0):
            repro=numpy.random.normal(0.6,0.15,size=1)
            repro=float(repro)

    else:
        repro=0

    ind.setInfo(repro, 'fitness')
    return (repro)



#####################################################################################################################


file_to_open_4='!"'+os.path.join(PATHF, "Resultats", "savepop%d.pop")+'"%gen'

# sim.SavePopulation('!"/home/clement/Documents/clement_barthelemy/SimulationPP/Resultats/savepop%d.pop"%gen'),

pop2 = sim.loadPopulation(os.path.join(PATHF, "savepop0.pop"))

pop2.evolve(

    matingScheme=sim.RandomMating( #Random mating for the reproduction
        ops = [sim.Recombinator(rates=recomb_rate)],
    ),

    postOps=[
        sim.PyQuanTrait(loci=range(nb_loci), func=value_qtraits_individual2, infoFields=['sum_g1','z1']),

        sim.PySelector(func=calc_fitness, begin=3, end=20, step=1),

        # sim.Stat(meanOfInfo=['sum_g1','z1','fitness'], varOfInfo=['sum_g1','z1','fitness'], vars=['meanOfInfo', 'varOfInfo']),
        # sim.PyEval(r"'gen,  , MEANs, MEANz,   VARz,   MEANfit,  VARfit\n'", at=0),
        # sim.PyEval(r"'%d, %2f, %2f, %2f, %2f, %2f\n' % (gen, meanOfInfo['sum_g1'],meanOfInfo['z1'], varOfInfo['z1'], meanOfInfo['fitness'], varOfInfo['fitness'])", begin=1, step=1),

        sim.SavePopulation(file_to_open_4),

    ],

    gen = nb_gen-1
)


#####################################################################################################################





print("+++++++++++++++----------------------------------- | Pop_Evolve_SimuPOP.py    | --- | FAIT | ------------------++++++++++++++++++++")





#====================================================================================================================
######################################  Contact : clement.barthelemy@gmail.com  #####################################
#====================================================================================================================